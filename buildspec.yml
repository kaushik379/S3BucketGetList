version: 0.2

env:
  variables:
    # --- Configuration for the Target Account ---
    TARGET_ACCOUNT_ID: "861530259719"
    ROLE_TO_ASSUME_NAME: "Ai-house-ecr-lambda-sts"
    AWS_REGION: "us-east-1"  # Or your desired region

    # --- Configuration for your application resources ---
    ECR_REPOSITORY_NAME: "demoimages"
    LAMBDA_FUNCTION_NAME: "web-adapter-demo-ci-cd"
    CFN_S3_BUCKET: "ecr-lambda-ai-house-rnd"
    ECR_CFN_TEMPLATE: "AiHouse-ecr-lambda.yml"
    LAMBDA_CFN_TEMPLATE: "ai-house-lambda-function-template.yaml"

phases:
  build:
    commands:
      # This entire block runs as a single script. 
      # 'set -e' ensures the script will exit immediately if any command fails.
      - |
        set -e

        echo "--- Step 1: Assume Role in Target Account ${TARGET_ACCOUNT_ID} ---"
        ROLE_TO_ASSUME_ARN="arn:aws:iam::${TARGET_ACCOUNT_ID}:role/${ROLE_TO_ASSUME_NAME}"
        
        # Use STS to get temporary credentials for the target account.
        # The 'jq' utility parses the JSON output from the AWS CLI.
        CREDS=$(aws sts assume-role --role-arn ${ROLE_TO_ASSUME_ARN} --role-session-name "CodeBuild-Deploy-Session")
        
        # Export the temporary credentials. All subsequent AWS CLI calls will automatically use these.
        export AWS_ACCESS_KEY_ID=$(echo "${CREDS}" | jq -r '.Credentials.AccessKeyId')
        export AWS_SECRET_ACCESS_KEY=$(echo "${CREDS}" | jq -r '.Credentials.SecretAccessKey')
        export AWS_SESSION_TOKEN=$(echo "${CREDS}" | jq -r '.Credentials.SessionToken')
        
        echo "Successfully assumed role. Now operating in account ${TARGET_ACCOUNT_ID}."

        echo "--- Step 2: Login to ECR in Target Account ---"
        aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin ${TARGET_ACCOUNT_ID}.dkr.ecr.$AWS_REGION.amazonaws.com
        REPOSITORY_URI=${TARGET_ACCOUNT_ID}.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY_NAME
        IMAGE_TAG=${CODEBUILD_RESOLVED_SOURCE_VERSION}

        echo "--- Step 3: Check for ECR Repository in Target Account ---"
        if ! aws ecr describe-repositories --repository-names $ECR_REPOSITORY_NAME --region $AWS_REGION > /dev/null 2>&1; then
          echo "ECR repository '$ECR_REPOSITORY_NAME' not found in account ${TARGET_ACCOUNT_ID}. Creating..."
          aws cloudformation create-stack --stack-name Create-ECR-For-Pipeline --template-url https://$CFN_S3_BUCKET.s3.$AWS_REGION.amazonaws.com/$ECR_CFN_TEMPLATE --region $AWS_REGION
          aws cloudformation wait stack-create-complete --stack-name Create-ECR-For-Pipeline --region $AWS_REGION
        else
          echo "ECR repository '$ECR_REPOSITORY_NAME' already exists in account ${TARGET_ACCOUNT_ID}."
        fi

        echo "--- Step 4: Build and Push Docker Image ---"
        docker build -t $REPOSITORY_URI:$IMAGE_TAG .
        docker push $REPOSITORY_URI:$IMAGE_TAG

        echo "--- Step 5: Check, Create, or Update Lambda in Target Account ---"
        if ! aws lambda get-function --function-name $LAMBDA_FUNCTION_NAME --region $AWS_REGION > /dev/null 2>&1; then
          echo "Lambda function '$LAMBDA_FUNCTION_NAME' not found in account ${TARGET_ACCOUNT_ID}. Creating..."
          aws cloudformation create-stack --stack-name Create-Lambda-For-Pipeline --template-url https://$CFN_S3_BUCKET.s3.$AWS_REGION.amazonaws.com/$LAMBDA_CFN_TEMPLATE --parameters ParameterKey=ImageUri,ParameterValue=$REPOSITORY_URI:$IMAGE_TAG --capabilities CAPABILITY_IAM --region $AWS_REGION
          aws cloudformation wait stack-create-complete --stack-name Create-Lambda-For-Pipeline --region $AWS_REGION
        else
          echo "Lambda function '$LAMBDA_FUNCTION_NAME' exists in account ${TARGET_ACCOUNT_ID}. Updating code..."
          aws lambda update-function-code --function-name $LAMBDA_FUNCTION_NAME --image-uri $REPOSITORY_URI:$IMAGE_TAG --region $AWS_REGION
        fi

        echo "Cross-account deployment to ${TARGET_ACCOUNT_ID} completed successfully."
