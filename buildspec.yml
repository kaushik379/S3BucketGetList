version: 0.2

# These environment variables are configured in the CodePipeline's CodeBuild stage
# The values below are defaults and will be overridden by the pipeline definition.
env:
  variables:
    AWS_ACCOUNT_ID: "9431432288443"
    ECR_REPOSITORY_NAME: "demoimages"
    LAMBDA_FUNCTION_NAME: "web-adapter-demo-ci-cd"
    CFN_S3_BUCKET: "ecr-lambda-ai-house-rnd"
    ECR_CFN_TEMPLATE: "AiHouse-ecr-lambda.yml"
    LAMBDA_CFN_TEMPLATE: "ai-house-lambda-function-template.yaml"

phases:
  pre_build:
    commands:
      - echo "Logging in to Amazon ECR..."
      - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
      - REPOSITORY_URI=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$ECR_REPOSITORY_NAME
      - IMAGE_TAG=${CODEBUILD_RESOLVED_SOURCE_VERSION:-latest}

  build:
    commands:
      - echo "--- Step 1: Check for ECR Repository and Build Image ---"
      # Check if the ECR repository exists by trying to describe it.
      # We redirect output to /dev/null to hide the "not found" error from logs.
      - |
        if ! aws ecr describe-repositories --repository-names $ECR_REPOSITORY_NAME --region $AWS_DEFAULT_REGION > /dev/null 2>&1; then
          echo "ECR repository '$ECR_REPOSITORY_NAME' not found. Creating it with CloudFormation..."
          aws cloudformation create-stack \
            --stack-name Create-ECR-For-Pipeline \
            --template-url https://$CFN_S3_BUCKET.s3.$AWS_DEFAULT_REGION.amazonaws.com/$ECR_CFN_TEMPLATE \
            --region $AWS_DEFAULT_REGION
          echo "Waiting for ECR stack creation to complete..."
          aws cloudformation wait stack-create-complete --stack-name Create-ECR-For-Pipeline --region $AWS_DEFAULT_REGION
          echo "ECR Repository created successfully."
        else
          echo "ECR repository '$ECR_REPOSITORY_NAME' already exists. Skipping creation."
        fi

      - echo "Building the Docker image..."
      # Assumes a Dockerfile is in the root of the repository
      - docker build -t $ECR_REPOSITORY_NAME:$IMAGE_TAG .
      - docker tag $ECR_REPOSITORY_NAME:$IMAGE_TAG $REPOSITORY_URI:$IMAGE_TAG

  post_build:
    commands:
      - echo "Pushing the Docker image to ECR..."
      - docker push $REPOSITORY_URI:$IMAGE_TAG
      
      - echo "--- Step 2: Check for Lambda Function ---"
      # Check if the Lambda function exists. Redirect output to hide errors.
      - |
        if ! aws lambda get-function --function-name $LAMBDA_FUNCTION_NAME --region $AWS_DEFAULT_REGION > /dev/null 2>&1; then
          echo "Lambda function '$LAMBDA_FUNCTION_NAME' not found. Creating it with CloudFormation..."
          aws cloudformation create-stack \
            --stack-name Create-Lambda-For-Pipeline \
            --template-url https://$CFN_S3_BUCKET.s3.$AWS_DEFAULT_REGION.amazonaws.com/$LAMBDA_CFN_TEMPLATE \
            --parameters ParameterKey=ImageUri,ParameterValue=$REPOSITORY_URI:$IMAGE_TAG \
            --capabilities CAPABILITY_IAM \
            --region $AWS_DEFAULT_REGION
          echo "Waiting for Lambda stack creation to complete..."
          aws cloudformation wait stack-create-complete --stack-name Create-Lambda-For-Pipeline --region $AWS_DEFAULT_REGION
          echo "Lambda function created successfully."
        else
          echo "Lambda function '$LAMBDA_FUNCTION_NAME' already exists. Skipping creation."
          echo "NOTE: To update the existing function with the new image, you would need an additional step or use a different deployment strategy like 'aws lambda update-function-code'."
        fi
      
      - echo "Build and Deploy process completed."
